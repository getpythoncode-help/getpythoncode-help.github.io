
[
  {
    "Week-7: Programing Assignment-01": "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Student {\n    char name[21];   // name (up to 20 chars + '\\0')\n    int physics;\n    int chemistry;\n    int maths;\n};\n\n// comparator for qsort\nint compare(const void *a, const void *b) {\n    struct Student *s1 = (struct Student *)a;\n    struct Student *s2 = (struct Student *)b;\n\n    // Compare Physics\n    if (s1 -> physics != s2->physics) {\n        return (s2 -> physics - s1->physics);  // descending order\n    }\n    // Compare Chemistry\n    if (s1 -> chemistry != s2->chemistry) {\n        return (s2 -> chemistry - s1 -> chemistry);\n    }\n    // Compare Maths\n    return (s2 -> maths - s1 -> maths);  // descending order\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    struct Student arr[100];\n\n    for (int iq = 0; iq < n; iq++) {\n        scanf(\"%s %d %d %d\", arr[iq].name, &arr[iq].physics,\n              &arr[iq].chemistry, &arr[iq].maths);\n    }\n\n    qsort(arr, n, sizeof(struct Student), compare);\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%s %d %d %d\\n\", arr[i].name,\n               arr[i].physics, arr[i].chemistry, arr[i].maths);\n    }\n\n    return 0;\n}\n ",
    "Week-7: Programing Assignment-02": " #include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct node {\n    int id;\n    int value;\n    struct node *next;\n};\n\nstruct node *create_node(int id, int val) {\n    struct node *new_node = (struct node *)malloc(sizeof(struct node));\n    if (new_node == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        exit(1);\n    }\n    new_node -> id = id;\n    new_node -> value = val;\n    new_node -> next = NULL;\n    return new_node;\n}\n\nstruct node *append(struct node *list, struct node *e) {\n    e -> next = list;   // insert at head\n    return e;         // new head is the new node\n}\n\nstruct node *search(struct node *list, int id) {\n    while (list != NULL) {\n        if (list -> id == id)\n            return list;   // found\n        list = list->next;\n    }\n    return NULL;  // not found\n}\n\nvoid change_value(struct node *list, int id, int val) {\n    struct node *e = search(list, id);\n    if (e != NULL) {\n        e -> value = val;   // update value\n    }\n}\n\nint find_value(struct node *list, int id) {\n    struct node *e = search(list, id);\n    if (e != NULL)\n        return e -> value;\n    return -1;\n}\n\nint main() {\n    char op;\n    int id, val;\n    struct node *list = NULL;\n\n    int flagship = 1;\n    do {\n        scanf(\" %c\", &op);\n        switch (op) {\n            case 'A':\n                scanf(\"%d %d\", &id, &val);\n                list = append(list, create_node(id, val));\n                break;\n            case 'S':\n                scanf(\"%d\", &id);\n                printf(\"%d %d\\n\", id, find_value(list, id));\n                break;\n            case 'C':\n                scanf(\"%d %d\", &id, &val);\n                change_value(list, id, val);\n                break;\n            case 'E':\n                flagship = 0;\n                break;\n        }\n    } while (flagship == 1);\n\n    return 0;\n}\n",
    "Week-7: Programing Assignment-03": " Question not given by NPTEL"
  },
  {
    "Week-5 Programing Assignment-01": "#include &lt;stdio.h&gt;\n\nvoid reverse() {\n    int cgp = getchar();  // read one character\n    if (cgp != EOF && cgp != '\\n') {\n        reverse();      // recursive call before printing\n        putchar(cgp);     // print when stack unwinds\n    }\n}\n\nint main() {\n    reverse();   // call recursive function\n    return 0;\n}\n ",
    "Week-5 Programing Assignment-02": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid genBinary(char *s, int i, int N) {\n    if (i == N) {\n        s[N] = '\\0';\n        printf(\"%s\\n\", s);\n        return;\n    }\n\n    // First choice: put '0'\n    s[i] = '0';\n    genBinary(s, i + 1, N);\n\n    // Second choice: put '1'\n    s[i] = '1';\n    genBinary(s, i + 1, N);\n}\n\nint main(void) {\n    char A[8];\n    int ntg;\n    scanf(\"%d\", &ntg);\n\n    genBinary(A, 0, ntg);\n\n    return 0;\n}\n",
    "Week-5 Programing Assignment-03": "#include &lt;stdio.h&gt;\n\n// Recursive function to compute BlockSum\nint blockSum(int *M, int nok) {\n    if (nok == 2) {\n        return M[0] - M[1];  // base case\n    }\n    int mid = nok / 2;\n    int left = blockSum(M, mid);         // first half\n    int right = blockSum(M + mid, mid);  // second half\n    return left - right;                 // recursive step\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    int M[1024];  // max size as per problem constraint\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &M[i]);\n    }\n\n    int result = blockSum(M, n);\n    printf(\"%d\", result);\n\n    return 0;\n}\n "
  },
  {
    "Week-8 Programing Assignment-01": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct ListNode {\n    int val;\n    struct ListNode* next;\n};\n\n// create new node\nstruct ListNode* newNode(int val) {\n    struct ListNode* node = (struct ListNode*)malloc(sizeof(struct ListNode));\n    node -> val = val;\n    node -> next = NULL;\n    return node;\n}\n\n// add two numbers represented by linked lists\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode* dummy = newNode(0);\n    struct ListNode* curr = dummy;\n    int carry = 0;\n\n    while (l1 != NULL || l2 != NULL || carry != 0) {\n        int x = (l1 != NULL) ? l1 -> val : 0;\n        int y = (l2 != NULL) ? l2 -> val : 0;\n\n        int sum99 = x + y + carry;\n        carry = sum99 / 10;\n\n        curr -> next = newNode(sum99 % 10);\n        curr = curr -> next;\n\n        if (l1 != NULL) l1 = l1 -> next;\n        if (l2 != NULL) l2 = l2 -> next;\n    }\n\n    return dummy->next; // skip dummy head\n}\n\n// append node at end\nvoid appendNode(struct ListNode** head, int val) {\n    struct ListNode* node = newNode(val);\n    if (*head == NULL) {\n        *head = node;\n        return;\n    }\n    struct ListNode* temp = *head; \n    while (temp -> next != NULL) temp = temp -> next;\n    temp -> next = node;\n}\n\n// print linked list\nvoid printList(struct ListNode* head) {\n    while (head != NULL) {\n        printf(\"%d\", head -> val);\n        if (head -> next != NULL) printf(\" \");\n        head = head -> next;\n    }\n}\n\n// read a linked list from one line of input\nstruct ListNode* readList() {\n    struct ListNode* head = NULL;\n    int x;\n    while (scanf(\"%d\", &x) == 1) {\n        appendNode(&head, x);\n        int c = getchar();\n        if (c == '\\n' || c == EOF) break;\n    }\n    return head;\n}\n\nint main() {\n    struct ListNode* l1 = readList();\n    struct ListNode* l2 = readList();\n\n    struct ListNode* result = addTwoNumbers(l1, l2);\n    printList(result);\n\n    return 0;\n}\n",
    "Week-8 Programing Assignment-02": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct ListNode {\n    int val;\n    struct ListNode* next;\n};\n\n// function to merge two sorted linked lists\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;  // dummy head\n    struct ListNode* tail = &dummy;\n    dummy.next = NULL;\n\n    while (l1 != NULL && l2 != NULL) {\n        if (l1 -> val <= l2 -> val) {\n            tail -> next = l1;\n            l1 = l1 -> next;\n        } else {\n            tail -> next = l2;\n            l2 = l2 -> next;\n        }\n        tail = tail -> next;\n    }\n\n    // append remaining nodes\n    if (l1 != NULL) tail -> next = l1;\n    if (l2 != NULL) tail -> next = l2;\n\n    return dummy.next;  // return merged list head\n}\n\n// create new node\nstruct ListNode* newNode(int val) {\n    struct ListNode* node = (struct ListNode*)malloc(sizeof(struct ListNode));\n    node -> val = val;\n    node -> next = NULL;\n    return node;\n}\n\n// append node to linked list\nvoid appendNode(struct ListNode** head, int val) {\n    struct ListNode* node = newNode(val);\n    if (*head == NULL) {\n        *head = node;\n        return;\n    }\n    struct ListNode* temp = *head;\n    while (temp->next != NULL) temp = temp -> next;\n    temp -> next = node;\n}\n\n// print linked list\nvoid printList(struct ListNode* head) {\n    while (head != NULL) {\n        printf(\"%d\", head -> val);\n        if (head -> next != NULL) printf(\" \");\n        head = head->next;\n    }\n}\n\nstruct ListNode* readList() {\n    struct ListNode* head = NULL;\n    int x;\n    char ch85;\n\n    while (scanf(\"%d\", &x) == 1) {\n        appendNode(&head, x);\n        ch85 = getchar();\n        if (ch85 == '\\n' || ch85 == EOF) break;\n    }\n\n    return head;\n}\n\nint main() {\n    struct ListNode* l1 = readList();\n    struct ListNode* l2 = readList();\n\n    struct ListNode* merged = mergeTwoLists(l1, l2);\n\n    printList(merged);\n\n    return 0;\n}\n",
    "Week-8 Programing Assignment-03": "Question not given by NPTEL"
  }
]
