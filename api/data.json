[
  {
    "Week-9: Programing Assignment-01": "int kp=0;\nfor(c=0;c < n;c++)\n{\n  if(search==array[c])\n     {\n       kp=1;\n       break;\n     }\n}\nif(kp==1)\n     {\nfor(c=0;c < n;c++)\n{\n  if(search==array[c])\n  {\n    printf(\"%d is present at location %d.\\n\",search,(c+1));\n    count++;\n  }\n}\nprintf(\"%d is present %d times in the array.\\n\",search,count);\n}\nelse\nprintf(\"%d is not present in the array.\\n\",search);\nreturn 0;\n} ",
    "Week-9: Programing Assignment-02": "position = linear_search(array, n, search);\n\n   if (position == -1)\n      printf(\"%d is not present in the array.\\n\", search);\n   else\n      printf(\"%d is present at location %d.\\n\", search, position+1);\n   return 0;\n}\n\nint linear_search(int a[], int n, int find) {\n   int cdc;\n   for (cdc = 0 ;cdc < n ; cdc++ )\n    {\n      if (a[cdc] == find)\n         return cdc;\n    }\n   return -1;\n} ",
    "Week-9: Programing Assignment-03": "int first, last, middle;\n   first = 0;\n   last = n - 1;\n   middle = (first+last)/2;\n\n   while (first <= last) {\n      if (array[middle] < search)\n         first = middle + 1;\n      else if (array[middle] == search) {\n         printf(\"%d found at location %d.\", search, middle+1);\n         break;\n      }\n      else\n         last = middle - 1;\n\n      middle = (first + last)/2;\n      }\n   if (first > last)\n      printf(\"Not found! %d isn't present in the list.\", search);\n\n     return 0;\n      }\n ",
    "Week-9: Programing Assignment-04": "int tp, end;\n   end = n - 1;\n   for (c = 0; c < n/2; c++) {\n    tp       = array[c];\n    array[c]   = array[end];\n    array[end] = tp;\n\n    end--;\n  } "
  },
  {
    "Week-8 Programing Assignment-01": "int HCF(int x0, int y)\n{\n   while (x0 != y)\n   {\n      if (x0 > y)\n       {\n           return HCF(x0 - y, y);\n       }\n       else\n       {\n       return HCF(x0, y - x0);\n       }\n    }\n    return(x0);\n}",
    "Week-8 Programing Assignment-02": "long power(int abc, int pow)\n{\nif (pow)\n{\nreturn (abc * power(abc, pow - 1));\n}\nreturn 1;\n} ",
    "Week-8 Programing Assignment-03": " int binary_conversion(int xy)\n  { \n     if (xy == 0)\n        {\n            return 0;\n        }\n        else\n        {\n            return (xy % 2) + 10 * binary_conversion(xy / 2);\n        }\n  }\n",
    "Week-8 Programing Assignment-04": " int sz;\n\tsz = strlen(str1);\n        reverse(str1, 0, sz - 1);\n        printf(\"The string after reversing is: %s\", str1);  \n        return 0;\n    }\n\n\nvoid reverse(char str1[], int index, int size)\n    {\n        char temp;\n        temp = str1[index];\n        str1[index] = str1[size - index];\n        str1[size - index] = temp;\n        if (index == size / 2)\n        {\n            return;\n        }\n        reverse(str1, index + 1, size);\n    }"
  }
]

