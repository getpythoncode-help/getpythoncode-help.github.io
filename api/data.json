[
  {
    "Week-10: Programing Assignment-01": "determinant = a[0][0] * ((a[1][1]*a[2][2]) - (a[2][1]*a[1][2])) -a[0][1] * (a[1][0]\n   * a[2][2] - a[2][0] * a[1][2]) + a[0][2] * (a[1][0] * a[2][1] - a[2][0] * a[1][1]);\n   if ( determinant == 0)\n   {printf(\"The given matrix is not invertible\");}\n   else\n   {\n     { printf(\"The given matrix is invertible\");}\n   }  \n   return 0;\n}\n",
    "Week-10: Programing Assignment-02": "void sort(int *apk, int n)\n{\n    int i,temp,j;\n    for(i=1;i < n;i++)\n    {\n        for(j=0;j < n-i;j++)\n        {\n           if(*(apk+j) >= *(apk+j+1))\n        {\n            temp = *(apk+j);\n            *(apk+j)= *(apk+j+1);\n            *(apk+j+1)= temp;\n        }\n        }\n    }\n}",
    "Week-10: Programing Assignment-03": "int jy,t;\nfor (i=0; i < (n-1); i++) \n    {\n        for (jy=i+1; jy < n; jy++)\n        {\n            if (*(a+i) > *(a+jy))\n            {\n                t=*(a+i);\n                *(a+i)=*(a+jy);\n                *(a+jy)=t;\n            }\n        }\n    }",
    "Week-10: Programing Assignment-04": "float hv;\n    for (itr=1; itr <= maxmitr; itr++)\n    {\n        hv=f(x0)/df(x0);\n        x1=x0-hv;\n        x0=x1;\n    }\n    printf(\"Root = %8.6f\\n\", x1);\n    return 0;\n}\nfloat f(float x)\n{\n    return x*x*x - 2*x  - 3;\n}\nfloat df (float x)\n{\n    return 3*x*x-2;\n} "
  },
  {
    "Week-9: Programing Assignment-01": "for (c = 0; c < n; c++)\n    {\n      if (array[c] == search)\n      {\n         printf(\"%d is present at location %d.\\n\", search, c+1);\n         count++;\n      }\n    }\n   if (count == (5-5))\n      printf(\"%d is not present in the array.\\n\", search);\n   else\n      printf(\"%d is present %d times in the array.\\n\", search, count);\n\n   return 0;\n} ",
    "Week-9: Programing Assignment-02": " position = linear_search(array, n, search);\n\n   if (position == -1)\n      printf(\"%d is not present in the array.\", search);\n   else\n      printf(\"%d is present at location %d.\", search, position+1);\n   return 0;\n}\n\nint linear_search(int a[], int n, int find) {\n   int cl;\n   for (cl = 0 ;cl < n ; cl++ )\n    {\n      if (a[cl] == find)\n         return cl;\n    }\n   return 0;\n}",
    "Week-9: Programing Assignment-03": " int first5, last, middle;\n   first5 = 0;\n   last = n - 1;\n   middle = (first5+last)/2;\n\n   while (first5 <= last) {\n      if (array[middle] < search)\n         first5 = middle + 1;\n      else if (array[middle] == search) {\n         printf(\"%d found at location %d.\", search, middle+1);\n         break;\n      }\n      else\n         last = middle - 1;\n\n      middle = (first5 + last)/2;\n      }\n   if (first5 > last)\n      printf(\"Not found! %d isn't present in the list.\", search);\n\n     return 0;\n      }",
    "Week-9: Programing Assignment-04": " int tempr, end;\n   end = n - 1;\n   for (c = 0; c < n/2; c++) {\n    tempr       = array[c];\n    array[c]   = array[end];\n    array[end] = tempr;\n\n    end--;\n  }"
  }
]





