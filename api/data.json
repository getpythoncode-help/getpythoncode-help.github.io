
[
  {
    "Week-4: Programing Assignment-01": " #include &lt;stdio.h&gt;\n\nint main() {\n    int arraySize, searchValue, positionFound = -1;\n    int numberArray[20]; // limit as per constraint\n    int loopIndex;\n\n    // Read the size of the array\n    scanf(\"%d\", &arraySize);\n\n    // Read array elements\n    for (loopIndex = 0; loopIndex < arraySize; loopIndex++) {\n        scanf(\"%d\", &numberArray[loopIndex]);\n    }\n\n    // Read the search value\n    scanf(\"%d\", &searchValue);\n\n    // Search for first occurrence\n    for (loopIndex = 0; loopIndex < arraySize; loopIndex++) {\n        if (numberArray[loopIndex] == searchValue) {\n            positionFound = loopIndex;\n            break;\n        }\n    }\n\n    // Output the result\n    printf(\"%d\", positionFound);\n\n    return 0;\n}\n",
    "Week-4: Programing Assignment-02": " #include &lt;stdio.h&gt;\n\nint main() {\n    int arraySize, searchValue;\n    int numberArray[20]; // limit as per constraint\n    int loopIndex, occurrenceCount = 0;\n\n    // Read the size of the array\n    scanf(\"%d\", &arraySize);\n\n    // Read array elements\n    for (loopIndex = 0; loopIndex < arraySize; loopIndex++) {\n        scanf(\"%d\", &numberArray[loopIndex]);\n    }\n\n    // Read the value to count\n    scanf(\"%d\", &searchValue);\n\n    // Count occurrences\n    for (loopIndex = 0; loopIndex < arraySize; loopIndex++) {\n        if (numberArray[loopIndex] == searchValue) {\n            occurrenceCount++;\n        }\n    }\n\n    // Output the result\n    printf(\"%d\", occurrenceCount);\n\n    return 0;\n}\n",
    "Week-4: Programing Assignment-03": " #include &lt;stdio.h&gt;\n\nint main() {\n    int arraySize;\n    char firstString[21], secondString[21]; // +1 for null terminator\n    int letterCount1[26] = {0}, letterCount2[26] = {0};\n    int loopIndex, isAnagram = 1;\n\n    // Read size of character arrays\n    scanf(\"%d\", &arraySize);\n\n    // Read first string\n    scanf(\"%s\", firstString);\n\n    // Read second string\n    scanf(\"%s\", secondString);\n\n    // Count frequency of each letter in first string\n    for (loopIndex = 0; loopIndex < arraySize; loopIndex++) {\n        letterCount1[firstString[loopIndex] - 'A']++;\n    }\n\n    // Count frequency of each letter in second string\n    for (loopIndex = 0; loopIndex < arraySize; loopIndex++) {\n        letterCount2[secondString[loopIndex] - 'A']++;\n    }\n\n    // Compare frequency counts\n    for (loopIndex = 0; loopIndex < 26; loopIndex++) {\n        if (letterCount1[loopIndex] != letterCount2[loopIndex]) {\n            isAnagram = 0;\n            break;\n        }\n    }\n\n    // Output result\n    printf(\"%d\", isAnagram);\n\n    return 0;\n}\n"
  },
  {
    "Week-5 Programing Assignment-01": "#include &lt;stdio.h&gt;\n\nvoid reverse() {\n    int cgp = getchar();  // read one character\n    if (cgp != EOF && cgp != '\\n') {\n        reverse();      // recursive call before printing\n        putchar(cgp);     // print when stack unwinds\n    }\n}\n\nint main() {\n    reverse();   // call recursive function\n    return 0;\n}\n ",
    "Week-5 Programing Assignment-02": "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid genBinary(char *s, int i, int N) {\n    if (i == N) {\n        s[N] = '\\0';\n        printf(\"%s\\n\", s);\n        return;\n    }\n\n    // First choice: put '0'\n    s[i] = '0';\n    genBinary(s, i + 1, N);\n\n    // Second choice: put '1'\n    s[i] = '1';\n    genBinary(s, i + 1, N);\n}\n\nint main(void) {\n    char A[8];\n    int ntg;\n    scanf(\"%d\", &ntg);\n\n    genBinary(A, 0, ntg);\n\n    return 0;\n}\n",
    "Week-5 Programing Assignment-03": "#include &lt;stdio.h&gt;\n\n// Recursive function to compute BlockSum\nint blockSum(int *M, int nok) {\n    if (nok == 2) {\n        return M[0] - M[1];  // base case\n    }\n    int mid = nok / 2;\n    int left = blockSum(M, mid);         // first half\n    int right = blockSum(M + mid, mid);  // second half\n    return left - right;                 // recursive step\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    int M[1024];  // max size as per problem constraint\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &M[i]);\n    }\n\n    int result = blockSum(M, n);\n    printf(\"%d\", result);\n\n    return 0;\n}\n "
  },
  {
    "Week-6 Programing Assignment-01": " #include &lt;stdio.h&gt;\n\n// Complete this Function to check if a matrix is symmetric.\n// A is an n*n Matrix. Return 1 if A is symmetric and 0 otherwise.\nint isSymmetric(int A[10][10], int n) {\n    for (int i = 0; i < n; i++) {\n        for (int jpg = 0; jpg < n; jpg++) {\n            if (A[i][jpg] != A[jpg][i]) {\n                return 0; // Not symmetric\n            }\n        }\n    }\n    return 1; // Symmetric\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    int A[10][10];\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            scanf(\"%d\", &A[i][j]);\n        }\n    }\n\n    printf(\"%d\", isSymmetric(A, n));\n\n    return 0;\n}\n",
    "Week-6 Programing Assignment-02": " #include &lt;stdio.h&gt;\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    int A[100][100];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            scanf(\"%d\", &A[i][j]);\n        }\n    }\n\n    int ipl2 = 0, j = 0;\n    // We know there is exactly one path; we follow 1's\n    while (ipl2 != n - 1 || j != n - 1) {\n        // Prefer moving right if possible\n        if (j + 1 < n && A[ipl2][j + 1] == 1) {\n            printf(\"R\");\n            j++;\n        }\n        // Otherwise move down\n        else if (ipl2 + 1 < n && A[ipl2 + 1][j] == 1) {\n            printf(\"D\");\n            ipl2++;\n        }\n    }\n\n    return 0;\n}\n",
    "Week-6 Programing Assignment-03": " #include &lt;stdio.h&gt;\n\nvoid dfs(int grid[20][20], int n, int i, int j) {\n    // Base conditions: out of bounds or water cell\n    if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] == 0)\n        return;\n\n    // Mark current cell as visited by setting it to 0\n    grid[i][j] = 0;\n\n    // Move in all 4 directions (up, down, left, right)\n    dfs(grid, n, i + 1, j);\n    dfs(grid, n, i - 1, j);\n    dfs(grid, n, i, j + 1);\n    dfs(grid, n, i, j - 1);\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n\n    int grid[20][20];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            scanf(\"%d\", &grid[i][j]);\n\n    int count = 0;\n\n    // Traverse the matrix and find islands\n    for (int idi = 0; idi < n; idi++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[idi][j] == 1) {\n                count++;\n                dfs(grid, n, idi, j); // mark the entire island as visited\n            }\n        }\n    }\n\n    printf(\"%d\", count);\n    return 0;\n}\n"
  }
]


