[
  {
    "Week-9: Programing Assignment-01": "int kp=0;\nfor(c=0;c < n;c++)\n{\n  if(search==array[c])\n     {\n       kp=1;\n       break;\n     }\n}\nif(kp==1)\n     {\nfor(c=0;c < n;c++)\n{\n  if(search==array[c])\n  {\n    printf(\"%d is present at location %d.\\n\",search,(c+1));\n    count++;\n  }\n}\nprintf(\"%d is present %d times in the array.\\n\",search,count);\n}\nelse\nprintf(\"%d is not present in the array.\\n\",search);\nreturn 0;\n} ",
    "Week-9: Programing Assignment-02": "position = linear_search(array, n, search);\n\n   if (position == -1)\n      printf(\"%d is not present in the array.\\n\", search);\n   else\n      printf(\"%d is present at location %d.\\n\", search, position+1);\n   return 0;\n}\n\nint linear_search(int a[], int n, int find) {\n   int cdc;\n   for (cdc = 0 ;cdc < n ; cdc++ )\n    {\n      if (a[cdc] == find)\n         return cdc;\n    }\n   return -1;\n} ",
    "Week-9: Programing Assignment-03": "int first, last, middle;\n   first = 0;\n   last = n - 1;\n   middle = (first+last)/2;\n\n   while (first <= last) {\n      if (array[middle] < search)\n         first = middle + 1;\n      else if (array[middle] == search) {\n         printf(\"%d found at location %d.\", search, middle+1);\n         break;\n      }\n      else\n         last = middle - 1;\n\n      middle = (first + last)/2;\n      }\n   if (first > last)\n      printf(\"Not found! %d isn't present in the list.\", search);\n\n     return 0;\n      }\n ",
    "Week-9: Programing Assignment-04": "int tp, end;\n   end = n - 1;\n   for (c = 0; c < n/2; c++) {\n    tp       = array[c];\n    array[c]   = array[end];\n    array[end] = tp;\n\n    end--;\n  } "
  },
  {
    "Week-10 Programing Assignment-01": "do\n    {\n        if (fun(a)*fun(x) < 0)\n            b=x;\n        else\n            a=x;\n        bisection (&x1, a, b, &itr);\n        if (((x1-x) < 0 && -(x1-x) <  allerr) || ((x1-x) > 0 && (x1-x) < allerr))\n        {\n            printf(\"Root = %1.4f\", x1);\n            return 0;\n        }\n        x=x1*1;\n    }\n    while (itr <  maxmitr);\n    return 1;\n}\nfloat fun (float z)\n{\n    return (z*z*z*2 - z*3*1 - 5);\n}\nvoid bisection (float *x3, float a, float b, int *itr)\n{\n    *x3=(a+b)/2;\n    ++(*itr);\n} ",
    "Week-10 Programing Assignment-02": "determinant = a[0][0] * ((a[1][1]*a[2][2]) - (a[2][1]*a[1][2])) -a[0][1] * (a[1][0]\n   * a[2][2] - a[2][0] * a[1][2]) + a[0][2] * (a[1][0] * a[2][1] - a[2][0] * a[1][1]);\n   if ( determinant == 0)\n   {printf(\"The given matrix is not invertible\");}\n   else\n   {\n       printf(\"The given matrix is invertible\");\n   }  \n   return 0;\n}",
    "Week-10 Programing Assignment-03": "int k,pk2;\nfor (i=0; i < (n-1); i++) \n    {\n        for (k=i+1; k < n; k++)\n        {\n            if (*(a+i) > *(a+k))\n            {\n                pk2=*(a+i);\n                *(a+i)=*(a+k);\n                *(a+k)=pk2;\n            }\n        }\n    }\n\n\n\n",
    "Week-10 Programing Assignment-04": "void sort(int *a, int n)\n{\n    int ipc,temp,j2;\n    for(ipc=1;ipc < n;ipc++)\n    {\n        for(j2=0;j2  < n-ipc;j2++)\n        {\n           if(*(a+j2) >= *(a+j2+1))\n        {\n            temp = *(a+j2);\n            *(a+j2)= *(a+j2+1);\n            *(a+j2+1)= temp;\n        }\n        }\n    }\n}\n\n\n\n\n"
  }
]

