#Q1
[-1,-2,-4,-5]

#Q2
[(12,15),(5,9),(8,3),(77,15)]

#Q3
    l.sort()
    mythirdmin=l[2]
    break

#Q4
   [l[1]]+oddpositions(l[2:])


#Q5
def sumof3squares(n):
  f=0
  for i in range(1,int(n**(0.5)),1):
    for j in range(1,int(n**(0.5)),1):
      for k in range(1,int(n**(0.5)),1):
        if (i*i + j*j + k*k)==n:
          f=1
  return (f==1)

#Q6

def intersect(l1,l2):
  l1s=set(l1)
  l2s=set(l2)
  ls = l1s.intersection(l2s)
  return list(ls)

#Q7
pattern = input()
while True:
    try:
        x = input()
        if pattern in x:
            a = x
    except:
        print(a)
        break

#Q8
def maxaverage(l):
	d = {}
	for i in l:
		name, score = i
		if name in d:
			tot_score, num = d[name]
			d[name] = (tot_score+score, num+1)
		else:
			d[name] = (score, 1)
	max= -1
	for key in d:
		tot_score, num = d[key]
		ave = tot_score/num
		if (max < ave):
			max = ave
	l = []
	for key in d:
		tot_score, num = d[key]
		ave = tot_score/num
		if (max == ave):
			l.append(key)
	l.sort()
	return l
